#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>
#include <string.h>
#include <sys/ptrace.h>
//#include <sys/prctl.h> -linux only!
#include <sys/types.h>

/*
int main(void)
{
   pid_t child_pid = fork();

   char buf[128]; 
   bzero(buf, 32);

   int ptrace_ret = 0;
   int status = 0;


   if (child_pid != 0) {
	   prctl(PR_SET_PDEATHSIG, SIGHUP); //child will get sighup on parents death (usually leads to termination)
	   ptrace(PTRACE_TRACEME, 0, 0, 0); //parent traces the child and if it calls execve sigtrap will be sent and stop the child (no shellcode)
	   puts("Give me some shellcode, k");
	   gets(buf); - super exploitable
	   return (0);
   }


   while (ptrace_ret = ptrace(PTRACE_PEEKUSR, child_pid, 44, 0) != 11)
    {
	    wait(&status);
	    if (WIFEXITED(status) || WEXITSTATUS(status) < 1)
		    puts("child is exiting...");
	    return 0;
    }

   puts("no exec() for you");
   kill(child_pid, 9);
   return 0;
}
*/

int main(void)
{
/*
	   0x080486c8 <+0>:	push   %ebp
	   0x080486c9 <+1>:	mov    %esp,%ebp
	   0x080486cb <+3>:	push   %edi
	   0x080486cc <+4>:	push   %ebx
	   0x080486cd <+5>:	and    $0xfffffff0,%esp
	   0x080486d0 <+8>:	sub    $0xb0,%esp - 176

	   0x080486d6 <+14>:	call   0x8048550 <fork@plt>
	   0x080486db <+19>:	mov    %eax,0xac(%esp) - 172
*/

   pid_t child_pid = fork();

/*
   0x080486e2 <+26>:	lea    0x20(%esp),%ebx - 32 (next one is 160 at +177)
   0x080486e6 <+30>:	mov    $0x0,%eax
   0x080486eb <+35>:	mov    $0x20,%edx - 32
   0x080486f0 <+40>:	mov    %ebx,%edi
   0x080486f2 <+42>:	mov    %edx,%ecx
   0x080486f4 <+44>:	rep stos %eax,%es:(%edi)
*/

   char buf[128]; 
   bzero(buf, 32);

/*
   0x080486f6 <+46>:	movl   $0x0,0xa8(%esp)
   0x08048701 <+57>:	movl   $0x0,0x1c(%esp)
*/

   int ret = 0;
   int status = 0;

/* making child-parent relations and child bahaviour
   0x08048709 <+65>:	cmpl   $0x0,0xac(%esp) - child pid with 0
   0x08048711 <+73>:	jne    0x8048769 <main+161>

   0x08048713 <+75>:	movl   $0x1,0x4(%esp) - PR_SET_PDEATHSIG
   0x0804871b <+83>:	movl   $0x1,(%esp) - sighup
   0x08048722 <+90>:	call   0x8048540 <prctl@plt>

   0x08048727 <+95>:	movl   $0x0,0xc(%esp)
   0x0804872f <+103>:	movl   $0x0,0x8(%esp)
   0x08048737 <+111>:	movl   $0x0,0x4(%esp)
   0x0804873f <+119>:	movl   $0x0,(%esp)
   0x08048746 <+126>:	call   0x8048570 <ptrace@plt>

   0x0804874b <+131>:	movl   $0x8048903,(%esp) "give me"
   0x08048752 <+138>:	call   0x8048500 <puts@plt>

   0x08048757 <+143>:	lea    0x20(%esp),%eax
   0x0804875b <+147>:	mov    %eax,(%esp)
   0x0804875e <+150>:	call   0x80484b0 <gets@plt>

   0x08048763 <+155>:	jmp    0x804881a <main+338>
   0x08048768 <+160>:	nop
*/

   if (child_pid != 0) {
	   prctl(PR_SET_PDEATHSIG, SIGHUP); //child will get sighup on parents death (usually leads to termination)
	   ptrace(PTRACE_TRACEME, 0, 0, 0); //parent traces the child and if it calls execve sigtrap will be sent and stop the child (no shellcode)
	   puts("Give me some shellcode, k");
	   gets(buf);
	   return (0);
   }

/* catching execve call end child exit status
   0x08048769 <+161>:	lea    0x1c(%esp),%eax - status
   0x0804876d <+165>:	mov    %eax,(%esp)
   0x08048770 <+168>:	call   0x80484f0 <wait@plt>

   0x08048775 <+173>:	mov    0x1c(%esp),%eax - status
   0x08048779 <+177>:	mov    %eax,0xa0(%esp) - tmp var at 160
   0x08048780 <+184>:	mov    0xa0(%esp),%eax
   0x08048787 <+191>:	and    $0x7f,%eax - 127
   0x0804878a <+194>:	test   %eax,%eax - compares to zero - equal to WIFEXITED(status)
   0x0804878c <+196>:	je     0x80487ac <main+228>

   0x0804878e <+198>:	mov    0x1c(%esp),%eax - status
   0x08048792 <+202>:	mov    %eax,0xa4(%esp) - tmp var at 164
   0x08048799 <+209>:	mov    0xa4(%esp),%eax
   0x080487a0 <+216>:	and    $0x7f,%eax -127
   0x080487a3 <+219>:	add    $0x1,%eax +1
   0x080487a6 <+222>:	sar    %al >>1 equal to WEXITSTATUS(status)
   0x080487a8 <+224>:	test   %al,%al compares to 0
   0x080487aa <+226>:	jle    0x80487ba <main+242>

   0x080487ac <+228>:	movl   $0x804891d,(%esp) - "child is exiting..."
   0x080487b3 <+235>:	call   0x8048500 <puts@plt>
   0x080487b8 <+240>:	jmp    0x804881a <main+338 - return>

   0x080487ba <+242>:	movl   $0x0,0xc(%esp) - 0 to 4 arg - ignored
   0x080487c2 <+250>:	movl   $0x2c,0x8(%esp) - 44 to 3 arg - it is the offset at user area - 4*ORIG_EAX - the number of system call just made
   0x080487ca <+258>:	mov    0xac(%esp),%eax - child_pid to 2 arg
   0x080487d1 <+265>:	mov    %eax,0x4(%esp)
   0x080487d5 <+269>:	movl   $0x3,(%esp) - 3 to first arg PTRACE_PEEKUSR
   0x080487dc <+276>:	call   0x8048570 <ptrace@plt>

   0x080487e1 <+281>:	mov    %eax,0xa8(%esp)
   0x080487e8 <+288>:	cmpl   $0xb,0xa8(%esp)
   0x080487f0 <+296>:	jne    0x8048768 <main+160> - !=11 cycle - 11 system call is execve
*/

   while (ptrace_ret = ptrace(PTRACE_PEEKUSR, child_pid, 44, 0) != 11) //44
    {
	    wait(&status);
	    if (WIFEXITED(status) || WEXITSTATUS(status) < 1)
		    puts("child is exiting...");
	    return 0;
    }

/* if he sees that we are out of the child process with execve call we are mocking on the hacker
   0x080487f6 <+302>:	movl   $0x8048931,(%esp) "no exec() for you"
   0x080487fd <+309>:	call   0x8048500 <puts@plt>

   0x08048802 <+314>:	movl   $0x9,0x4(%esp) - 9
   0x0804880a <+322>:	mov    0xac(%esp),%eax - child_pid
   0x08048811 <+329>:	mov    %eax,(%esp)
   0x08048814 <+332>:	call   0x8048520 <kill@plt>

   0x08048819 <+337>:	nop
   0x0804881a <+338>:	mov    $0x0,%eax
   0x0804881f <+343>:	lea    -0x8(%ebp),%esp
   0x08048822 <+346>:	pop    %ebx
   0x08048823 <+347>:	pop    %edi
   0x08048824 <+348>:	pop    %ebp
   0x08048825 <+349>:	ret
*/

   puts("no exec() for you");
   kill(child_pid, 9);
   return 0;
}
